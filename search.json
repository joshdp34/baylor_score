[
  {
    "objectID": "by-statsds-topic.html",
    "href": "by-statsds-topic.html",
    "title": "Modules By Topic",
    "section": "",
    "text": "American Ninja Warrior - Kaplan-Meier Survival Analysis\n\n\n\nKaplan-Meier\n\nLog Rank test\n\nNonparametric tests\n\n\n\nExploring Survival Analysis using the Kaplan-Meier method with American Ninja Warrior data.\n\n\n\n\n\nJun 4, 2025\n\n\nJonathan Lieb, Rodney X. Sturdivant\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Home",
      "Modules By Topic"
    ]
  },
  {
    "objectID": "_team.html",
    "href": "_team.html",
    "title": "üèÖ The Baylor SCORE Team",
    "section": "",
    "text": "NoteRodney X. Sturdivant\n\n\n\n\n\nRod Sturdivant is a Professor of Statistical Science and Director of the Statistical Consulting Center.\n\n\n\n\n\n\n\n\n\nNoteMichael Gallaugher\n\n\n\n\n\nMichael Gallaugher is an Assistant Professor of Statistical Science.\n\n\n\n\n\n\n\n\n\nNoteJoshua Patrick\n\n\n\n\n\nJoshua Patrick is a Senior Lecturer of Statistical Science.\n\n\n\n\n\n\nWe‚Äôve had numerous students assist in developing both SCORE modules and preparing submissions for the data repository. They are listed by year below.\n\n\n\n\n\n\nNoteStudent Contributors\n\n\n\n\n\nThe following students have assisted in developing SCORE materials\n\nSpring 2023\n\nConnor Bryson\nTony Munoz\n\nSummer 2023\n\nCaleb Skinner\nIan Young\n\nSummer 2024\n\nJonathan Lieb",
    "crumbs": [
      "Home",
      "üèÖ The Baylor SCORE Team"
    ]
  },
  {
    "objectID": "_team.html#faculty",
    "href": "_team.html#faculty",
    "title": "üèÖ The Baylor SCORE Team",
    "section": "",
    "text": "NoteRodney X. Sturdivant\n\n\n\n\n\nRod Sturdivant is a Professor of Statistical Science and Director of the Statistical Consulting Center.\n\n\n\n\n\n\n\n\n\nNoteMichael Gallaugher\n\n\n\n\n\nMichael Gallaugher is an Assistant Professor of Statistical Science.\n\n\n\n\n\n\n\n\n\nNoteJoshua Patrick\n\n\n\n\n\nJoshua Patrick is a Senior Lecturer of Statistical Science.",
    "crumbs": [
      "Home",
      "üèÖ The Baylor SCORE Team"
    ]
  },
  {
    "objectID": "_team.html#students",
    "href": "_team.html#students",
    "title": "üèÖ The Baylor SCORE Team",
    "section": "",
    "text": "We‚Äôve had numerous students assist in developing both SCORE modules and preparing submissions for the data repository. They are listed by year below.\n\n\n\n\n\n\nNoteStudent Contributors\n\n\n\n\n\nThe following students have assisted in developing SCORE materials\n\nSpring 2023\n\nConnor Bryson\nTony Munoz\n\nSummer 2023\n\nCaleb Skinner\nIan Young\n\nSummer 2024\n\nJonathan Lieb",
    "crumbs": [
      "Home",
      "üèÖ The Baylor SCORE Team"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Baylor SCORE Module Pre-print Repository",
    "section": "",
    "text": "This page contains education materials for the SCORE Network that were created by faculty and students from the Department of Statistical Science at Baylor University and the Department of Mathematics, Physics, & Statistics at Azusa Pacific University."
  },
  {
    "objectID": "index.html#all-modules",
    "href": "index.html#all-modules",
    "title": "Baylor SCORE Module Pre-print Repository",
    "section": "All Modules",
    "text": "All Modules\n\n\n\n\n\n\nBrowse all modules below. Use the sidebar to filter by sport or visit by statistics topic.\n\n\n\n\n\n\n\n\n\n\n\n\n\nAmerican Ninja Warrior - Kaplan-Meier Survival Analysis\n\n\n\nKaplan-Meier\n\nLog Rank test\n\nNonparametric tests\n\n\n\nExploring Survival Analysis using the Kaplan-Meier method with American Ninja Warrior data.\n\n\n\n\n\nJun 4, 2025\n\n\nJonathan Lieb, Rodney X. Sturdivant\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#other-preprint-servers",
    "href": "index.html#other-preprint-servers",
    "title": "Baylor SCORE Module Pre-print Repository",
    "section": "Other Preprint Servers",
    "text": "Other Preprint Servers\nThis page links to preprint repositories maintained by members of the SCORE Network. These preprint repositories are created and maintained by faculty and students from the respective institutions. Please note that these materials have not yet completed the required pedagogical and industry peer reviews to become a published module on the SCORE Network. However, instructors are still welcome to use these materials if they are so inclined.\nThe following are actively maintained preprint repositories:\n\nCarnegie Mellon University\nSt.¬†Lawrence University\nBaylor University (This site)\nWest Point"
  },
  {
    "objectID": "index.html#contributing-andor-joining-the-score-network",
    "href": "index.html#contributing-andor-joining-the-score-network",
    "title": "Baylor SCORE Module Pre-print Repository",
    "section": "Contributing and/or Joining the SCORE Network",
    "text": "Contributing and/or Joining the SCORE Network\n\nIf you are interested in contributing to and/or joining the SCORE Network, please check out https://scorenetwork.org/index.html.\nIf you are interested in creating a page similar to this to host your own ‚Äúin development modules‚Äù, please feel free to copy the associated Github repository: https://github.com/iramler/slu_score_preprints."
  },
  {
    "objectID": "index.html#funding-source",
    "href": "index.html#funding-source",
    "title": "Baylor SCORE Module Pre-print Repository",
    "section": "Funding Source",
    "text": "Funding Source\nThe development of the SCORE with Data network is funded by the National Science Foundation (award 2142705)."
  },
  {
    "objectID": "anw/kaplan_meier/index.html",
    "href": "anw/kaplan_meier/index.html",
    "title": "American Ninja Warrior - Kaplan-Meier Survival Analysis",
    "section": "",
    "text": "NoteFacilitation notes\n\n\n\n\n\n\nThis module would be suitable for an in-class lab or take-home assignment in an intermediate statistics course.\nIt assumes a familiarity with the RStudio Environment and R programming language.\nStudents should be provided with the following data file (.csv) and Quarto document (.qmd) to produce visualizations and write up their answers to each exercise. Their final deliverable is to turn in an .html document produced by ‚ÄúRendering‚Äù the .qmd.\n\n2021 Stage 1 Finals Data\n2023 Stage 1 Finals Data\nStudent Quarto template\n\nPosit Cloud (via an Instructor account) or Github classroom are good options for disseminating files to students, but simply uploading files to your university‚Äôs course management system works, too.\nThe anw_2021_stage1.csv data is derived largely from americanninjawarriornation.com. Additional columns such as sex were individually researched and added to the data.\nThe anw_2023_stage1.csv data is derived largely from sasukepedia.",
    "crumbs": [
      "Home",
      "Anw",
      "American Ninja Warrior - Kaplan-Meier Survival Analysis"
    ]
  },
  {
    "objectID": "anw/kaplan_meier/index.html#terms-to-know",
    "href": "anw/kaplan_meier/index.html#terms-to-know",
    "title": "American Ninja Warrior - Kaplan-Meier Survival Analysis",
    "section": "Terms to know",
    "text": "Terms to know\nBefore proceeding with the survival analysis, let‚Äôs make sure we understand American Ninja Warrior and some of it‚Äôs vocabulary to help us climb our way through this lab.\n\nHow does American Ninja Warrior work?\nAmerican Ninja Warrior is an NBC competition show where participants attempt to complete a series of obstacle courses of increasing difficulty. In a single obstacle course, the competitors must complete a series of obstacles in a row. If they fail an obstacle (usually this happens when they fall into the water below), they are eliminated from the competition. The competitors also have a time limit to complete the course. The competitors are ranked based on how far they get in the course and how quickly they complete it.\nMost of the obstacles are designed to test the competitors‚Äô upper body strength. Some obstacles require balance and agility though.\n\n\nThe warped wall is arguably the most famous, although now least difficult, obstacle on an American Ninja Warrior course. The warped wall is a curved wall that competitors must run up and grab the top of. The warped wall is on every course and is often the final obstacle, although this is not the case on the Finals courses.\nThe warped wall was previously 14 feet and is now 14.5 feet tall. They have even had a 18 foot warped wall on the show.\n\n\n\nWarped Wall\n\n\nImage Source: Dustin Batt, CC BY-SA 2.0, via Wikimedia Commons\nThe obstacles in American Ninja Warrior are all given names. For example, the famed Warped Wall is a curved wall that competitors must run up and grab the top of. The Salmon Ladder is a series of rungs that competitors must move up by jumping and pulling themselves up.\nWatch Enzo Wilson complete the American Ninja Warrior course at the 2021 Finals Stage 1 (Season 13) in the video below.\n\n\n\n\n\n\n\nImportantKey Terms\n\n\n\n\nObstacle: A challenge that competitors must complete to move on in the competition.\nCourse: A series of obstacles that competitors must complete in a row. A typical course has 6-10 obstacles.\nStage: A round of the competition. The competition starts with Stage 1 and progresses to Stage 4.\nTime Limit: The amount of time competitors have to complete the course, often between 2-4 minutes.",
    "crumbs": [
      "Home",
      "Anw",
      "American Ninja Warrior - Kaplan-Meier Survival Analysis"
    ]
  },
  {
    "objectID": "anw/kaplan_meier/index.html#variable-descriptions",
    "href": "anw/kaplan_meier/index.html#variable-descriptions",
    "title": "American Ninja Warrior - Kaplan-Meier Survival Analysis",
    "section": "Variable Descriptions",
    "text": "Variable Descriptions\nThe ninja data you‚Äôll be analyzing in this lab provides the individual run information for each ninja in the 2021 Finals Stage 1 (Season 13). The data includes the ninja‚Äôs name, their sex, the obstacle they failed on, and the cause of that failure.\n\n\n\n\n\n\n\nVariable\nDescription\n\n\n\n\nname\nName of the American Ninja Warrior\n\n\nsex\nSex of the American Ninja Warrior (M/F)\n\n\nobstacle\nThe name of the obstacle the ninja fell on or the last obstacle they completed if they ran out of time or finished the course\n\n\nobstacle_number\nThe obstacle‚Äôs place in the run\n\n\ncause\nWhat caused the ninja to fail (Fall/Time/Complete)\n\n\n\n\n\nNote: It is important to recognize that if the competitor fell on the 7th obstacle the obstacle number is 7. However, if the competitor ran out of time on the 7th obstacle, the obstacle number is 6, since the 6th obstacle was the last time that we could say they either fell or completed an obstacle. This will be important for censoring later. If the competitor completed the course, the obstacle number is set to the last obstacle they completed, which is the 9th obstacle in the 2021 Finals Stage 1 course.",
    "crumbs": [
      "Home",
      "Anw",
      "American Ninja Warrior - Kaplan-Meier Survival Analysis"
    ]
  },
  {
    "objectID": "anw/kaplan_meier/index.html#points-of-confusion",
    "href": "anw/kaplan_meier/index.html#points-of-confusion",
    "title": "American Ninja Warrior - Kaplan-Meier Survival Analysis",
    "section": "Points of Confusion",
    "text": "Points of Confusion\nUse the following code to create a table of the obstacle names and their corresponding obstacle numbers. This will help you understand the order of the obstacles in the course.\n\nninja |&gt; \n  distinct(obstacle, obstacle_number)\n\n# A tibble: 10 √ó 2\n   obstacle        obstacle_number\n   &lt;chr&gt;                     &lt;dbl&gt;\n 1 Slide Surfer                  1\n 2 Swinging Blades               2\n 3 Double Dipper                 3\n 4 Jumping Spider                4\n 5 Tire Run                      5\n 6 Dipping Birds                 7\n 7 Warped Wall                   6\n 8 The High Road                 8\n 9 Fly Hooks                     8\n10 Cargo Net                     9\n\n\nIt can be seen quickly that there are 2 obstacles with number 8. The duplicate obstacle number 8 is due to the fact that Stage One of the 2021 Finals allowed a split-decision. This means that competitors could choose between two different obstacles for obstacle 8.\n\n\nRead about the 2021 Stage 1 Split Decision here.\nAdditionally, one competitor Joe Moravsky ran the course twice (falling the first time and completing it the second time). This is because he was the Safety Pass Winner from the previous round. The Safety Pass allows a competitor to run the course again if they fail the first time. This poses some questions about how to handle this observation. We could\n\nInclude both runs in the analysis, treating them as separate observations.\nInclude only the first run in the analysis.\nInclude only the second run in the analysis.\n\nIf we include the second run in the analysis, we are neglecting the fact that Joe Moravsky had already attempted the course once and may have learned from his mistakes.\nIf we include the first run in the analysis, an argument could be made that Moravsky only failed the first time because he knew he had a second chance.\nIn most survival analysis situations, an individual would not be capable of participating twice from the beginning (after all if death were truly the event of interest, it would be safe to say there is no second chance). Therefore, we will only include the first run in the analysis.\nRun the code below to remove the second run from the data.\n\nninja &lt;- ninja |&gt; \n  filter(name != \"Joe Moravsky (Safety Pass)\")\n\nNow that we‚Äôve cleared some of the muddiness, let‚Äôs move on to the fun stuff!",
    "crumbs": [
      "Home",
      "Anw",
      "American Ninja Warrior - Kaplan-Meier Survival Analysis"
    ]
  },
  {
    "objectID": "anw/kaplan_meier/index.html#censored-data",
    "href": "anw/kaplan_meier/index.html#censored-data",
    "title": "American Ninja Warrior - Kaplan-Meier Survival Analysis",
    "section": "Censored Data",
    "text": "Censored Data\nIn survival analysis, we often need to censor data. Censored data occurs when the event of interest has not occurred for some of the observations. For the heart attack example, suppose we follow subjects for 10 years. It is not unlikely that some will not have a second heart attack in that time. It is also possible that we are unable to follow all subjects for the full 10 years. Such data is censored. We have information that the person did not have a second heart attack for a certain amount of time, but we do not have information beyond that time.\nWe could, of course, just exclude these observations and use only those who had a second heart attack. The problem is that this creates potential bias. Suppose those who had treatment A do not have a second heart attack as quickly. More in that group might not have a heart attack in the 10 years. By excluding them we would bias our estimate of the average time until a heart attack for this group to be shorter than it actually is.",
    "crumbs": [
      "Home",
      "Anw",
      "American Ninja Warrior - Kaplan-Meier Survival Analysis"
    ]
  },
  {
    "objectID": "anw/kaplan_meier/index.html#introducing-survival-analysis-using-american-ninja-warrior-data",
    "href": "anw/kaplan_meier/index.html#introducing-survival-analysis-using-american-ninja-warrior-data",
    "title": "American Ninja Warrior - Kaplan-Meier Survival Analysis",
    "section": "Introducing Survival Analysis using American Ninja Warrior Data",
    "text": "Introducing Survival Analysis using American Ninja Warrior Data\nIn the heart attack study, we have two key variables. One is the time each subject is observed \\(t\\) = years, which we suppose are only integer values 1, 2, 3,‚Ä¶(technically this would be interval censored data but we will not explore this more advanced topic here). The second is the censoring variable \\(c_i\\), which tells us if we observed the event \\(c_i = 1\\) or not \\(c_i = 0\\).\nOur data for two subjects might look like:\n\n\nSubjectTimeCensor1812100\n\n\nWe see that subject 1 was observed for 8 years and had a heart attack at year 8. Subject 2, on the other hand, was observed for the full 10 years and did not have a heart attack.\nTo illustrate survival analysis for the ANW data, we will define the time using the obstacle number. So, instead of time \\(t = 0, 1, 2,...\\) years we will have time \\(n = 0, 1, 2, 3,...\\) obstacles. Note that there is an actual time element to the obstacle course, but for the purpose of learning survival analysis our time is the obstacle number.\nThe event of interest is the failure of a competitor on an obstacle. This is important as it is possible to fail the course itself, for stage 1, if the allotted time expires. However, that is not the outcome of interest here.\nAs with the heart attack example, there are several ways in which the data might be censored. If a competitor completes the course, we do not know how many obstacles they would complete before the event (failing an obstacle) would occur. This is similar to the case where a subject was followed for 10 years without a heart attack; our subject was followed for 9 obstacles (our time variable) without failing an obstacle.\nAn additional possible censoring occurs if the time limit is reached. Again, if that occurs we do not know how many obstacles the competitor would complete before failing one, although we do know that they didn‚Äôt fail on any of the ones they completed before time was up. In the heart attack study this would be similar to a case where we observed a subject for 6 years and they died due to some other cause but never had a heart attack.\n\n\nNote: Another advanced survival model involves analyzing ‚Äúcompeting risks‚Äù if interest is in multiple different outcomes such as death from a heart attack or death from some other cause. In the ANW case, failing an obstacle or running out of time would be competing risks. We will not explore this topic here.\nUse the code below to create a new column called censor in the ninja data that is a binary indicator of whether or not the observation should be censored. This column will be used to indicate whether the data is censored or not.\n\n# Makes a column called censor that is 1 if the competitor failed and 0 if they completed the course or ran out of time\nninja &lt;- ninja |&gt; \n  mutate(censor = if_else(cause %in%  c(\"Complete\", \"Time\"), 0, 1))\n\nThree competitors in the resulting data are:\n\n\nnamesexobstacleobstacle_numbercausecensorMeagan MartinFSlide Surfer1Fall1Sean BryanMCargo Net9Complete0Brett SimsMFly Hooks8Time0\n\n\nWe can interpret this data:\n\nMeaghan Martin failed on the first obstacle so the time (obstacle_number) is 1 and censor = 1.\n\nSean Bryan completed the course so the obstacle_number is 9 but censor = 0. We do not know how many obstacles Sean completes before failing one; he moved on to the second stage course but we did not collect data after the first stage. He was censored due to the ‚Äústudy time‚Äù of 9 obstacles.\nBrett Sims ran out of time while on the 9th obstacle. We know he completed 8 obstacles so his ‚Äútime‚Äù is obstacle_number = 8 but we do not know if he would have failed the 9th obstacle or not (or any further obstacles) so his observation is censored.",
    "crumbs": [
      "Home",
      "Anw",
      "American Ninja Warrior - Kaplan-Meier Survival Analysis"
    ]
  },
  {
    "objectID": "anw/kaplan_meier/index.html#estimating-the-survival-function-using-kaplan-meier",
    "href": "anw/kaplan_meier/index.html#estimating-the-survival-function-using-kaplan-meier",
    "title": "American Ninja Warrior - Kaplan-Meier Survival Analysis",
    "section": "Estimating the Survival Function using Kaplan-Meier",
    "text": "Estimating the Survival Function using Kaplan-Meier\nThe Kaplan-Meier estimator uses information from all of the observations in the data to provide a non-parametric estimate of the survival function. The estimator considers survival to a certain point in time as a series of steps defined at the observed times.\nIn order to calculate the probability of surviving past a certain point in time (past a certain obstacle in this case), the conditional probability of surviving past that point given that the competitor has survived up to that point must be calculated first.\nThe formula for the conditional probability of surviving past a point in time (\\(t_i\\)) given that the competitor has survived up to that point in time(\\(t_{i-1}\\)) is:\n\n\nNote: This function could also be written as \\(P(T &gt; t_i | T \\geq t_{i-1}) = \\frac{n_i - d_i}{n_i}\\)\n\\(P(T \\geq t_i | T \\geq t_{i-1}) = 1- \\frac{d_i}{n_i}\\)\nWhere:\n\n\\(d_i\\) is the number of competitors that failed at time \\(t_i\\)\n\\(n_i\\) is the number of competitors that were at risk at time \\(t_i\\)\n\nThe Kaplan-Meier estimator is the product of the conditional probabilities of surviving past each point in time up through that point in time.\n\\(\\hat{S}(t) = \\prod_{t_i \\leq t} (1 - \\frac{d_i}{n_i})\\)\n\n\nNote: Censored data does not count in the at risk competitors\nwhere \\(n_i = n_{i-1} - d_{i-1} - c_{i-1}\\)\n\n\\(c_i\\) is the number of competitors censored at time \\(t_i\\)\n\nFor example, we create a data set with 25 competitors and 5 obstacles:\n\n# Setting a seed for reproducibility\nset.seed(123)\n\n# Creating fake data\nfake_data &lt;- tibble(obstacle_number = c(1:5, 2,5), censor = c(rep(1, 5), rep(0, 2))) |&gt; \n  sample_n(25, replace = TRUE)\n\nhead(fake_data)\n\n# A tibble: 6 √ó 2\n  obstacle_number censor\n            &lt;dbl&gt;  &lt;dbl&gt;\n1               5      0\n2               5      0\n3               3      1\n4               2      0\n5               3      1\n6               2      1\n\n\nEach row of the data is a competitor (\\(i = 1,...,25\\)) and the first column (‚Äúobstacle_number‚Äù) is the last obstacle for which each was observed. The ‚Äúcensor‚Äù variable is the indicator of whether the obstacle was failed (1 = failed).\nWe will step through a few calculations to illustrate the Kaplan-Meier (KM) estimator. The calculation is easiest if the data is put in a format by the obstacle number (time) when things occurred. The code below produces this format:\n\nfake_data_summary &lt;- fake_data |&gt; \n  group_by(obstacle_number) |&gt; \n  summarize(fails = sum(censor == 1),\n            censored = sum(censor == 0)) |&gt;\n  ungroup() \n\nfake_data_summary\n\n# A tibble: 5 √ó 3\n  obstacle_number fails censored\n            &lt;dbl&gt; &lt;int&gt;    &lt;int&gt;\n1               1     4        0\n2               2     3        4\n3               3     7        0\n4               4     2        0\n5               5     3        2\n\n\nWe see that each obstacle (time) had events. For the first obstacle, these events were all failures (4 fell). At obstacle 2, there were 3 failures but 4 censored. The censored competitors ran out of time before they could either complete or fail obstacle 3. We similarly see failures and censored observations at the last obstacle. Those censored at the last obstacle were those who completed the course.\nSuppose we wanted to calculate the Kaplan-Meier estimate of surviving past obstacle 2 we would need to find the following probabilities:\n\\(P(T &gt; 1 | T &gt; 0) = P(T &gt; 1) =  1 - \\frac{\\text{number of competitors that failed at obstacle 1}}{\\text{number of competitors that attempted obstacle 1}}\\)\n\\(P(T &gt; 2 | T &gt; 1) = 1 - \\frac{\\text{number of competitors that failed at obstacle 2}}{\\text{number of competitors that attempted obstacle 2}}\\)\nBelow we calculate the first probability:\n\nfake_data_summary &lt;- fake_data_summary |&gt; \n  mutate(at_risk = c(25,rep(NA,4)),\n         p_surv_cond = (at_risk - fails)/at_risk,\n         p_surv_km = p_surv_cond*1)\n\nfake_data_summary\n\n# A tibble: 5 √ó 6\n  obstacle_number fails censored at_risk p_surv_cond p_surv_km\n            &lt;dbl&gt; &lt;int&gt;    &lt;int&gt;   &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n1               1     4        0      25        0.84      0.84\n2               2     3        4      NA       NA        NA   \n3               3     7        0      NA       NA        NA   \n4               4     2        0      NA       NA        NA   \n5               5     3        2      NA       NA        NA   \n\n\nWe compute the probability using the formula earlier:\n\\(P(T &gt; t_i | T \\geq t_{i-1}) = \\frac{n_i - d_i}{n_i}\\)\nWe create a column for the number at risk (\\(n_1\\)) which is 25 for the first obstacle. \\(d_i\\) is found already in the ‚Äúfails‚Äù column.\nIn order to compute the second probability, we need to compute the next at risk value, \\(n_2\\). This value is 25 minus the 4 failures or 21. Since 0 were censored, we do not lose any other competitors. From there, we can again compute the conditional probability using the formula:\n\nfake_data_summary &lt;- fake_data_summary |&gt; \n  mutate(at_risk = c(25, 21, rep(NA,3)),\n         p_surv_cond = (at_risk - fails)/at_risk)\n\nfake_data_summary\n\n# A tibble: 5 √ó 6\n  obstacle_number fails censored at_risk p_surv_cond p_surv_km\n            &lt;dbl&gt; &lt;int&gt;    &lt;int&gt;   &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n1               1     4        0      25       0.84       0.84\n2               2     3        4      21       0.857     NA   \n3               3     7        0      NA      NA         NA   \n4               4     2        0      NA      NA         NA   \n5               5     3        2      NA      NA         NA   \n\n\nFinally, we then need to multiply these two probabilities together to get the Kaplan-Meier estimate of surviving past obstacle 2.\n\\(P(T &gt; 2) = P(T &gt; 1) * P(T &gt; 2 | T &gt; 1)\\)\nThe following code calculates the Kaplan-Meier estimate of surviving past obstacle 2:\n\nfake_data_summary$p_surv_km[2] &lt;- fake_data_summary$p_surv_cond[1]*\n  fake_data_summary$p_surv_cond[2]\nfake_data_summary\n\n# A tibble: 5 √ó 6\n  obstacle_number fails censored at_risk p_surv_cond p_surv_km\n            &lt;dbl&gt; &lt;int&gt;    &lt;int&gt;   &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n1               1     4        0      25       0.84       0.84\n2               2     3        4      21       0.857      0.72\n3               3     7        0      NA      NA         NA   \n4               4     2        0      NA      NA         NA   \n5               5     3        2      NA      NA         NA   \n\n\nThe Kaplan-Meier estimate of surviving past obstacle 2 in this fake example is 0.72.\n\n\n\n\n\n\nNoteExercise 2: Fake Data Kaplan-Meier Estimates\n\n\n\nIn this exercise you will calculate the remaining three Kaplan-Meier estimates of surviving past each obstacle for the fake data. Important note: how many are at risk for the next obstacle (3) in the table? 21 attempted obstacle 2 and three failed. However, 4 ran out of time and were censored! Thus, the correct number at risk, \\(n_3\\) is \\(21 - 7 = 14\\)! Use this value to help you complete the table.",
    "crumbs": [
      "Home",
      "Anw",
      "American Ninja Warrior - Kaplan-Meier Survival Analysis"
    ]
  },
  {
    "objectID": "anw/kaplan_meier/index.html#kaplan-meier-estimator-manual-calculation",
    "href": "anw/kaplan_meier/index.html#kaplan-meier-estimator-manual-calculation",
    "title": "American Ninja Warrior - Kaplan-Meier Survival Analysis",
    "section": "Kaplan-Meier Estimator Manual Calculation",
    "text": "Kaplan-Meier Estimator Manual Calculation\nThe ninja data frame contains information about individual competitors in the ninja competition. We will need to summarize the data to calculate the Kaplan-Meier estimator manually.\n\n\n\n\n\n\nNoteExercise 3: Manual Calculation of Kaplan-Meier Estimator\n\n\n\nIn this exercise you will calculate the Kaplan-Meier estimator of surviving past each obstacle in the ninja competition step-by-step.\n\n\n\n\n\n\nNotePart 1: Number of Events\n\n\n\nThe first step is to calculate the number of competitors that failed and the number of competitors that were censored at each point in time. These are the \\(d_i\\) and \\(c_i\\) values needed to calculate the conditional probability of surviving past each point in time.\nUse the following code to sum the number of competitors that failed and the number of competitors that were censored at each obstacle.\n\n\nninja_summary &lt;- ninja |&gt; \n  group_by(obstacle = obstacle_number) |&gt;\n  summarize(fails = sum(cause == \"Fall\"),\n            censored = sum(cause %in% c(\"Complete\", \"Time\")))\n\n\nAt which obstacle did the most competitors fail?\nAt which obstacle were the most competitors censored (not including obstacle 9 which is completion)?\n\n\n\n\n\n\n\n\n\nNotePart 2: At Risk Competitors\n\n\n\nThe second step is to calculate the number of competitors at risk at each point in time. This is the \\(n_i\\) value needed to calculate the conditional probability of surviving past each point in time.\nUse the following code to calculate the number of competitors at risk at each point in time from the ninja_summary data frame.\n\n\nninja_summary &lt;- ninja_summary |&gt; \n  mutate(attempts = 68 - lag(cumsum(fails), default = 0) - \n           lag(cumsum(censored), default = 0))\n\n\nWhich obstacle had the most competitors at risk?\nWhy don‚Äôt previously censored competitors contribute to the number of competitors at risk at the obstacle?\n\n\n\n\n\n\n\n\n\nNotePart 3: Conditional Survival Probability\n\n\n\nThe third step is to calculate the conditional probability of survival at each point in time. This is the \\(P(T \\geq t_i | T \\geq t_{i-1})\\) value needed to calculate the Kaplan-Meier estimator and is calculated as \\(1 - \\frac{d_i}{n_i}\\) or 1 minus the conditional ‚Äúfailure probability‚Äù.\n\nUse the ninja_summary data frame to calculate the probability that someone survives each obstacle. Do this using the mutate function to create a new column called surv_prob. Survival probability is 1 minus the number of competitors that failed divided by the number of competitors at risk. Save this data frame as ninja_summary.\n\n\n\nWhat percentage of at-risk competitors survived the first obstacle?\nWhat percentage of at-risk competitors failed the fifth obstacle?\nWhich obstacle had the highest conditional fail probability?\nDid obstacle 2 or obstacle 7 have a higher conditional survival rate?\n\n\n\n\n\n\n\n\n\nNotePart 4: Kaplan-Meier\n\n\n\nThe final step is to calculate the Kaplan-Meier estimator of surviving past each point in time (\\(\\hat{S}(t)\\)) This is calculated as the product of the conditional probabilities of surviving past each point in time up through the desired point in time (\\(\\prod_{i=1}^{t} P(T \\geq t_i | T \\geq t_{i-1})\\)).\nUse the following code to calculate the Kaplan-Meier estimator manually by multiplying the conditional probabilities of surviving past each point in time up through the desired point in time.\n\n\nninja_summary &lt;- ninja_summary |&gt; \n  mutate(km = cumprod(surv_prob))\n\n\nWhat is the Kaplan-Meier estimate for surviving past the first obstacle?\nWhat is the Kaplan-Meier estimate for surviving past first five obstacles?\nWhat is the farthest obstacle that for which the Kaplan-Meier estimator has more 50% of competitors surviving?\n\n\n\n\nPlotting the Kaplan-Meier Estimator\nWe will now use ggplot2 to plot the Kaplan-Meier estimator for the ninja competitors. The Kaplan-Meier estimator is a step function, so we will use geom_step to plot the estimator. We will also use geom_point to plot the points where the estimator changes.\n\n\n\n\n\n\n\nNotePart 5: Plotting the Kaplan-Meier Estimator\n\n\n\n\n\nUse the ninja_summary data frame in conjunction with ggplot2‚Äôs geom_step and geom_point to plot the Kaplan-Meier estimator for the ninja competitors.\nComment on the plot.\nWhat do you notice about where the lowest point on the plot is in regard to survival probability? Does survival probability reach zero? Why or why not?\n\n\n\n\n\n\n Note: The censored column is the number of competitors that were not tracked after that obstacle. For any obstacle that is not the last one, the number censored are the amount that ran out of time on the next obstacle. For the last obstacle, the number censored are the competitors that completed the course.\n\n\nNote: The lag function shifts the cumsum of the fails column down one row. The default = 0 argument fills in the first row with 0. This is necessary to help calculate the number of competitors at risk at each obstacle. Note that the lag function is not used in conjunction with the cumsumfunction for the censored column.\n\n TIP: You can pipe the data frame into the mutate function to create a new column.\nTIP: The mutate function works like so: data_frame |&gt; mutate(new_column = calculation)\n\n Note: The cumprod function calculates the cumulative product of the values given to it.\n\n Type ?geom_step, ?geom_point, or ?ggplot in the console to learn more about these functions.\n\nTIP: Remember that you can add the + operator to continue adding layers to the plot like seen below\n\nggplot(your_data, aes(x = time_var, y = kaplan_meier_var)) +\n  geom_step() +\n  geom_point()\n\nTIP: You can also add labels to the plot using the labs function like seen below\n\nggplot(your_data, aes(x = time_var, y = kaplan_meier_var)) +\n  geom_step() +\n  geom_point() +\n  labs(title = \"Your Title\",\n       x = \"X Axis Label\",\n       y = \"Y Axis Label\")",
    "crumbs": [
      "Home",
      "Anw",
      "American Ninja Warrior - Kaplan-Meier Survival Analysis"
    ]
  },
  {
    "objectID": "anw/kaplan_meier/index.html#using-r-packages-to-automatically-calculate-the-kaplan-meier-estimator",
    "href": "anw/kaplan_meier/index.html#using-r-packages-to-automatically-calculate-the-kaplan-meier-estimator",
    "title": "American Ninja Warrior - Kaplan-Meier Survival Analysis",
    "section": "Using R Packages to Automatically Calculate the Kaplan-Meier Estimator",
    "text": "Using R Packages to Automatically Calculate the Kaplan-Meier Estimator\nPhew! That was a lot of tedious work to calculate and plot the Kaplan-Meier estimator manually. Luckily, there is a much easier way to calculate the Kaplan-Meier estimator using R.\nThe survival package in R provides a function called survfit that can be used to calculate the Kaplan-Meier estimator. The survfit function requires a Surv object as input. The Surv object is created using the Surv function, which requires two arguments:\n\nThe time to event data. The time to event data is the time at which the event occurred or the time at which the individual was censored. In our case this is the obstacle_number in our ninja data.\nThe event status. The event status is a binary variable that indicates whether the event occurred or the individual was censored. The event status is coded as 1 if the event occurred and 0 if the individual was censored. This is contained in the censor column of the ninja data.\n\nBelow a survfit model is created for the ninja dataset and the results are stored in the ninja_km object.\n\nninja_km &lt;- survfit(Surv(obstacle_number, censor) ~ 1, data = ninja)\n\n\n\n\n\n\n\nNoteExercise 4: Kaplan-Meier Estimates and Interpretation\n\n\n\nUse summary(ninja_km) to view a summary of the Kaplan-Meier estimator.\n\nDo the values in the survival column match the values you calculated manually?\n\n\nThe output also shows the 95% confidence intervals.\n\nWhich obstacle number is the first point in time where a survival rate of less than .5 falls within the 95% confidence interval?\nWhat do you notice about the standard error as the time increases and more ninjas have been eliminated?\n\n\n\n\nThe computations for calculating the Confidence Interval for the K-M Estimate are fairly complex. The method most commonly used is called the log-log survival function and was proposed by Kalbfleisch and Prentice (2002). This function is computed by \\(ln(-ln[\\hat{S}(t)])\\) with variance derived from the delta method and calculated by \\[\n\\frac{1}{[ln(\\hat{S}(t))]^2}\\sum_{t_i\\leq{t}}\\frac{d_i}{n_i(n_i - d_i)}\n\\].\nThe endpoints for the confidence interval for the log-log survival function are therefore found by \\(ln(-ln[\\hat{S}(t)]) \\pm Z_{1-\\alpha / 2} SE [ln(-ln[\\hat{S}(t)]) ]\\)\nAnd the endpoints expressed by the computer and seen in the summary are \\(exp[-exp(\\hat{c}_u)] \\text{ and } exp[-exp(\\hat{c}_l)]\\)\n\nQuartile Interpretation\nThe three quartiles are common statistics to look at when doing a survival analysis. The interpretations of these are as follows:\n\n\nNote: If the data is uncensored the estimate is just the median of the data. If the data is censored, the KM estimate is used to find these by finding the time at which it drops below the percentile\n\n25th Percentile- 75% of the people survive past this point in time\nMedian- 50% of the people will survive past this time\n75th Percentile- 25% survive past this time\n\n\n\n\n\n\n\nNoteExercise 5: Interpreting Quartiles\n\n\n\nUse the results from quantile(ninja_km) to answer the following questions\n\nWhat is the earliest time that the confidence intervals imply that the true mean of surviving past that time could be 75%? What is the latest time?\nWhat is the interpretation of the NA values in the 75th percentile columns?\nWhat is the earliest time (within the 95% confidence interval) at which the true survival rate suggests 50% of the competitors would fail on or before?\n\n\n\n\n\nPlotting with R\nAfter fitting a Kaplan-Meier model, we can use the ggsurvplot function from the survminer package to plot the Kaplan-Meier estimator. The ggsurvplot function requires the Kaplan-Meier model as input.\nBelow is an example of how easy it is to plot the Kaplan-Meier estimator using R.\n\nggsurvplot(ninja_km,\n           conf.int = TRUE)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n‚Ñπ Please use `linewidth` instead.\n‚Ñπ The deprecated feature was likely used in the ggpubr package.\n  Please report the issue at &lt;https://github.com/kassambara/ggpubr/issues&gt;.\n\n\nIgnoring unknown labels:\n‚Ä¢ fill : \"Strata\"\nIgnoring unknown labels:\n‚Ä¢ fill : \"Strata\"",
    "crumbs": [
      "Home",
      "Anw",
      "American Ninja Warrior - Kaplan-Meier Survival Analysis"
    ]
  },
  {
    "objectID": "anw/kaplan_meier/index.html#the-log-rank-test-optionaladvanced",
    "href": "anw/kaplan_meier/index.html#the-log-rank-test-optionaladvanced",
    "title": "American Ninja Warrior - Kaplan-Meier Survival Analysis",
    "section": "The Log-Rank Test (optional/advanced)",
    "text": "The Log-Rank Test (optional/advanced)\nThe Log-Rank Test is a statistical test used to compare the survival probabilities of two or more groups. The test is used to determine if there is a statistically significant difference between the survival probabilities of the groups.\nThe hypotheses for our log-rank test are as follows:\n\n\\(H_0: S_M(t) = S_F(t)\\) for all \\(t\\)\n\\(H_a: S_M(t) \\neq S_F(t)\\) for at least one \\(t\\)\n\nwhere \\(S_M(t)\\) is the survival probability for males at time \\(t\\) and \\(S_F(t)\\) is the survival probability for females at time \\(t\\).\nWhen comparing two groups like this, we can calculate the expected number of deaths in each group. Below is the formula for calculating the number of expected deaths for group 0 at time \\(t_i\\):\n\\[\\hat{e}_{0i} = \\frac{n_{0i}d_i}{n_i}\\]\nwhere \\(n_{0i}\\) is the number of individuals at risk in group 0 at time \\(t_i\\), \\(d_i\\) is the total number of deaths at time \\(t_i\\), and \\(n_i\\) is the total number of individuals at risk at time \\(t_i\\).\nThe variance estimator is drawn from the hypergeometric distribution. The formula for the variance of the number of deaths in group 0 at time \\(t_i\\) is:\n\\[\\hat{v}_{0i} = \\frac{n_{0i}n_{1i}d_i(n_i - d_i)}{n_i^2(n_i - 1)}\\]\nwhere \\(n_{0i}\\) is the number of individuals at risk in group 0 at time \\(t_i\\), \\(n_{1i}\\) is the number of individuals at risk in group 1 at time \\(t_i\\), \\(d_i\\) is the total number of deaths at time \\(t_i\\), and \\(n_i\\) is the total number of individuals at risk at time \\(t_i\\).\nThe test statistic is calculated as the square of the sum of the differences between the observed and expected number of deaths for the group divided by the sum of the variance of the number of deaths for the group at each time point. The formula for the test statistic is as follows:\n\\[Q = \\frac{[\\sum_{i=1}^m (d_{0i} - \\hat{e}_{0i})]^2}{\\sum_{i=1}^m \\hat{v}_{0i}}\\]\nUsing the null hypothesis, the p-value can be calculated using the chi-squared distribution with 1 degree of freedom.\n\\[p = P(X^2(1) &gt; Q)\\]\n\n\nNOTE: This use of the chi-squared distribution assumes that the censoring is independent of the group.\n\nNOTE: The degrees of freedom for the chi-squared distribution is 1 because we are comparing two groups. If we were comparing more than two groups, the degrees of freedom would be the number of groups minus 1.\n\nThankfully R has a built-in function to perform the log-rank test. The survdiff function in the survival package can be used to perform the log-rank test. The survdiff function requires a Surv object as input. It will then perform the log-rank test and return the test statistic and p-value.\n\n\nNOTE: The log-rank test is a non-parametric test. This means that it does not assume that the data is normally distributed.\nThe code below runs the log-rank test on the ninja data set to compare the survival of male and female competitors.\n\nninja_km_diff &lt;- survdiff(Surv(obstacle_number,\n                               censor) ~ sex, data = ninja)\n\n\n\n\n\n\n\nNoteExercise 7: Comparing Survival vs.¬†Expected\n\n\n\nUse the code below to see the results of the survdiff function\n\nninja_km_diff\n\nCall:\nsurvdiff(formula = Surv(obstacle_number, censor) ~ sex, data = ninja)\n\n       N Observed Expected (O-E)^2/E (O-E)^2/V\nsex=F 12       10     4.05      8.72      11.1\nsex=M 56       27    32.95      1.07      11.1\n\n Chisq= 11.1  on 1 degrees of freedom, p= 9e-04 \n\n\n\nHow many female competitors are in the data set? How many fell? How many were expected to fall (round to the nearest whole number)?\nDid more or less male competitors fall than expected?\nWhat is the p-value of the test? What does this mean?",
    "crumbs": [
      "Home",
      "Anw",
      "American Ninja Warrior - Kaplan-Meier Survival Analysis"
    ]
  },
  {
    "objectID": "anw/kaplan_meier/index.html#other-nonparametric-tests-optionaladvanced",
    "href": "anw/kaplan_meier/index.html#other-nonparametric-tests-optionaladvanced",
    "title": "American Ninja Warrior - Kaplan-Meier Survival Analysis",
    "section": "Other Nonparametric Tests (optional/advanced)",
    "text": "Other Nonparametric Tests (optional/advanced)\nAlthough the survdiff function uses the most common test for comparing Kaplan-Meier curves, there are a variety of other methods that can be used. These other methods developed because of the log rank test‚Äôs greatest weakness: It weights all time points equally even though there are fewer people at risk later than at the beginning. These methods are all similar to a standard log-rank test but attempt to weight time points in order to detect differences better throughout time as opposed to the end, which is where the log-rank test finds most of its differences. The ratio of the observed and expected number of deaths is calculated in a similar manner but with weights applied as seen below:\n\\[Q = \\frac{[\\sum_{i=1}^m w_i(d_0i - \\hat{e}_{0i})]^2}{\\sum_{i=1}^m w_i^2\\hat{v}_{0i}}\\]\nBelow some of the other methods that can be used are broken down, with their weighting and purpose explained:\n\nWilcoxon (Gehan-Breslow) Test: This test gives more weight to early time points based on the number of individuals at risk. Its weighting is: \\[w_i = n_i\\]\nTarone-Ware Test: This test gives more weight to time points with more individuals at risk, but less heavily than the Gehan-Breslow test. Its weighting is: \\[w_i = \\sqrt{n_i}\\]\nPeto-Prentice Test: This test also gives more weight to earlier time points, but not as much as the Gehan-Breslow test. Its weighting is:\n\n\\[w_i = \\tilde{S}(t_{(i)})\\] where \\[\\tilde{S}(t_{(i)}) = \\prod_{t_{(j)}&lt;t} \\left(1 - \\frac{d_j}{n_j}\\right)\\]\n\nFleming-Harrington Test: This test allows the user to chose \\(\\rho\\) and \\(q\\) values to weight the time points. If \\(\\rho\\) is larger it will weight the earlier time points more heavily, and if \\(q\\) is larger it will weight the later time points more heavily. Its weighting is:\n\n\\[w_i = [\\tilde{S}(t_{(i-1)})]^{\\rho}[1 - \\tilde{S}(t_{(i-1)})]^q\\] where \\[\\tilde{S}(t_{(i- 1)}) = \\text{Kaplan-Meier Estimate at time } t_{i-1}\\]\nThankfully the surv_pvalue function in the survminer package can be used to calculate the p-value for all of these tests by changing the method argument. See the table below for the different method arguments to use:\n\n\n\nTest\nMethod Argument\n\n\n\n\nLog Rank Test\nDefault- no argument needed\n\n\nWilcoxon/Gehan-Breslow\nmethod = ‚Äún‚Äù\n\n\nTarone-Ware\nmethod = ‚ÄúTW‚Äù\n\n\nPeto-Prentice\nmethod = ‚ÄúPP‚Äù\n\n\nFleming-Harrington\nmethod = ‚ÄúFH‚Äù\n\n\n\nThe surv_pvalue function does need a survfit object as input. We can use the ninja_km_gender object created earlier to check the p-values for the different methods.\n\n\n\n\n\n\nNoteExercise 8: Log-Rank Tests\n\n\n\nRun the code below to see the p-values for the different methods.\n\nsurv_pvalue(ninja_km_gender) #log rank\nsurv_pvalue(ninja_km_gender, method = \"n\") #Gehan Breslow (generalized Wilcoxon)\nsurv_pvalue(ninja_km_gender, method = \"TW\") #tarone-ware\nsurv_pvalue(ninja_km_gender, method = \"PP\") #Peto-Prentice\nsurv_pvalue(ninja_km_gender, method = \"FH\") #Fleming-Harrington\n\n\nUsing \\(\\alpha = 0.05\\), do all of the tests lead to the same conclusion? If so what is the conclusion? If not which ones agree and which ones do not?\nWhich test had the smallest p-value?\nWhich test had the largest p-value?\nBased off of the p-values for the different tests, would you conclude that the difference between the genders is most likely more significant at the beginning or end of the course?",
    "crumbs": [
      "Home",
      "Anw",
      "American Ninja Warrior - Kaplan-Meier Survival Analysis"
    ]
  }
]