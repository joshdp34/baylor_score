labs(x = "x", y = "Density") +
theme_minimal(base_size = 14) +
theme(legend.position = "none")  # remove legend since labels are on plot
# Show plot
print(p)
library(ggplot2)
library(dplyr)
# Parameters for the normals
params <- data.frame(
mean = c(0, 2, -2),
sd   = c(1, 0.5, 2),
color = c("red", "blue", "green")
)
# Generate data for the curves
curve_data <- params %>%
group_by(mean, sd, color) %>%
do(data.frame(
x = seq(min(params$mean) - 4, max(params$mean) + 4, length.out = 1000),
mean = .$mean,
sd = .$sd,
color = .$color
)) %>%
ungroup() %>%
mutate(density = dnorm(x, mean, sd))
# Base plot
p <- ggplot(curve_data, aes(x = x, y = density, color = color)) +
geom_line(size = 1) +
# Labels for each curve (slightly above max density for visibility)
geom_text(
data = params,
aes(x = mean,
y = dnorm(mean, mean, sd) + 0.05,
label = paste0("mu = ", mean, ", sigma = ", sd),
color = color),
inherit.aes = FALSE,
vjust = -0.5
) +
labs(x = "x", y = "Density") +
theme_minimal(base_size = 14) +
xlim(-8, 5)+
theme(legend.position = "none")  # remove legend since labels are on plot
# Show plot
print(p)
library(ggplot2)
library(dplyr)
# Parameters for the normals
params <- data.frame(
mean = c(0, 2, -2),
sd   = c(1, 0.5, 2),
color = c("red", "blue", "green")
)
# Generate data for the curves
curve_data <- params %>%
group_by(mean, sd, color) %>%
do(data.frame(
x = seq(min(params$mean) - 8, max(params$mean) + 4, length.out = 1000),
mean = .$mean,
sd = .$sd,
color = .$color
)) %>%
ungroup() %>%
mutate(density = dnorm(x, mean, sd))
# Base plot
p <- ggplot(curve_data, aes(x = x, y = density, color = color)) +
geom_line(size = 1) +
# Labels for each curve (slightly above max density for visibility)
geom_text(
data = params,
aes(x = mean,
y = dnorm(mean, mean, sd) + 0.05,
label = paste0("mu = ", mean, ", sigma = ", sd),
color = color),
inherit.aes = FALSE,
vjust = -0.5
) +
labs(x = "x", y = "Density") +
theme_minimal(base_size = 14) +
xlim(-8, 5)+
theme(legend.position = "none")  # remove legend since labels are on plot
# Show plot
print(p)
library(ggplot2)
library(dplyr)
# Parameters for the normals
params <- data.frame(
mean = c(0, 2, -2),
sd   = c(1, 0.5, 2),
color = c("red", "blue", "green")
)
# Generate data for the curves
curve_data <- params %>%
group_by(mean, sd, color) %>%
do(data.frame(
x = seq(min(params$mean) - 8, max(params$mean) + 4, length.out = 1000),
mean = .$mean,
sd = .$sd,
color = .$color
)) %>%
ungroup() %>%
mutate(density = dnorm(x, mean, sd))
# Base plot
p <- ggplot(curve_data, aes(x = x, y = density, color = color)) +
geom_line(size = 1) +
# Labels for each curve (slightly above max density for visibility)
geom_text(
data = params,
aes(x = mean,
y = dnorm(mean, mean, sd) + 0.05,
label = paste0("mu==", mean, "*','~sigma==", sd),
color = color),
inherit.aes = FALSE,
vjust = -0.5
) +
labs(x = "x", y = "Density") +
theme_minimal(base_size = 14) +
xlim(-8, 5)+
theme(legend.position = "none")  # remove legend since labels are on plot
# Show plot
print(p)
library(ggplot2)
library(dplyr)
# Parameters for the normals
params <- data.frame(
mean = c(0, 2, -2),
sd   = c(1, 0.5, 2),
color = c("red", "blue", "green")
)
# Generate data for the curves
curve_data <- params %>%
group_by(mean, sd, color) %>%
do(data.frame(
x = seq(min(params$mean) - 8, max(params$mean) + 4, length.out = 1000),
mean = .$mean,
sd = .$sd,
color = .$color
)) %>%
ungroup() %>%
mutate(density = dnorm(x, mean, sd))
# Base plot
p <- ggplot(curve_data, aes(x = x, y = density, color = color)) +
geom_line(size = 1) +
# Labels for each curve (slightly above max density for visibility)
geom_text(
data = params,
aes(x = mean,
y = dnorm(mean, mean, sd) + 0.05,
label = paste0("mu==", mean, "*','~sigma==", sd),
color = color),
inherit.aes = FALSE,
parse=T,
vjust = -0.5
) +
labs(x = "x", y = "Density") +
theme_minimal(base_size = 14) +
xlim(-8, 5)+
theme(legend.position = "none")  # remove legend since labels are on plot
# Show plot
print(p)
library(ggplot2)
library(dplyr)
# Parameters for the normals
params <- data.frame(
mean = c(0, 2, -2),
sd   = c(1, 0.5, 2),
color = c("red", "blue", "green")
)
# Generate data for the curves
curve_data <- params %>%
group_by(mean, sd, color) %>%
do(data.frame(
x = seq(min(params$mean) - 8, max(params$mean) + 4, length.out = 1000),
mean = .$mean,
sd = .$sd,
color = .$color
)) %>%
ungroup() %>%
mutate(density = dnorm(x, mean, sd))
# Base plot
p <- ggplot(curve_data, aes(x = x, y = density, color = color)) +
geom_line(size = 1) +
# Labels for each curve (slightly above max density for visibility)
geom_text(
data = params,
aes(x = mean,
y = dnorm(mean, mean, sd) + 0.05,
label = paste0("mu==", mean, "*','~sigma==", sd),
color = color),
inherit.aes = FALSE,
parse=T,
vjust = -0.5
) +
labs(x = "x", y = "Density") +
theme_minimal(base_size = 14) +
xlim(-8, 5)+
ylim(0, 1)+
theme(legend.position = "none")  # remove legend since labels are on plot
# Show plot
print(p)
#| echo: false
#| message: false
#| warning: false
library(tidyverse)
ggplot(data.frame(x = c(-4, 4)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = 0, sd = 1), colour = "#2c7fb8", size = 1) +
geom_vline(xintercept = c(-1, 1), linetype = "dashed", colour = "#e6550d") +
geom_vline(xintercept = c(-2, 2), linetype = "dotted", colour = "#31a354") +
labs(x = "z", y = "Density", title = "Standard normal density with one- and two-standard-deviation markers") +
annotate("text", x = 0, y = 0.35, label = "68% between -1 and 1", colour = "#e6550d", hjust = 0.5) +
annotate("text", x = 0, y = 0.3, label = "95% between -2 and 2", colour = "#31a354", hjust = 0.5) +
theme_minimal()
#| message: false
#| warning: false
library(tidyverse)
library(nycflights13)
flights |>
mutate(late_dep = dep_delay > 30,      # TRUE if departure delay > 30 min
early_arr = arr_delay < 0) |>   # TRUE if arrival was early
select(year:day, dep_delay, arr_delay, late_dep, early_arr) |>
head(5)
flights |>
summarise(
n_missing_dep = sum(is.na(dep_time)),
n_missing_arr = sum(is.na(arr_time))
)
flights |>
group_by(year, month, day) |>
summarise(
all_dep_within_hour = all(dep_delay <= 60, na.rm = TRUE),
any_long_arr_delay  = any(arr_delay >= 300, na.rm = TRUE),
.groups = "drop"
)
flights |>
group_by(year, month, day) |>
summarise(
prop_on_time_dep    = mean(dep_delay <= 60, na.rm = TRUE),
count_long_arr_delay = sum(arr_delay >= 300, na.rm = TRUE),
.groups = "drop"
)
flights |>
mutate(
sched_hour   = sched_dep_time %/% 100,
sched_minute = sched_dep_time %% 100
) |>
select(sched_dep_time, sched_hour, sched_minute) |>
head()
x = c(1, 2, 5, 10, 15, 20)
cut(x, breaks = c(0, 5, 10, 20), labels = c("small", "medium", "large"))
flights |>
mutate(
sched_hour   = sched_dep_time %/% 100,
sched_minute = sched_dep_time %% 100
) |>
select(sched_dep_time, sched_hour, sched_minute) |>
head()
flights |>
summarise(
mean_arr_delay    = mean(arr_delay, na.rm = TRUE),
median_arr_delay  = median(arr_delay, na.rm = TRUE),
q95_arr_delay     = quantile(arr_delay, 0.95, na.rm = TRUE),
sd_arr_delay      = sd(arr_delay, na.rm = TRUE),
iqr_arr_delay     = IQR(arr_delay, na.rm = TRUE)
)
flights %>%
mutate(
dep_time_na       = is.na(dep_time),
sched_dep_time_na = is.na(sched_dep_time),
dep_delay_na      = is.na(dep_delay)
) %>%
count(dep_time_na, sched_dep_time_na, dep_delay_na)
x = seq(-4, 4, length = 100)
y = dnorm(x)
library(tidyverse)
x = seq(-4, 4, length = 100)
y = dnorm(x)
data.frame(x, y) |>
ggplot(aes(x=x, y=y))+
geom_line()
# install.packages("ggplot2") # if needed
library(ggplot2)
library(grid)   # for arrow()
alpha <- 0.05
z_alpha <- qnorm(1 - alpha)  # upper-tail critical value (â‰ˆ 1.64485)
p <- ggplot(data.frame(x = c(-4, 4)), aes(x)) +
# Density curve
stat_function(fun = dnorm, linewidth = 1) +
# Shaded upper-tail area
stat_function(
fun = dnorm, geom = "area",
xlim = c(z_alpha, 4),
alpha = 0.3
) +
# Optional vertical line at z_{0.05} (helps show the cutoff)
geom_vline(xintercept = z_alpha, linetype = "dashed") +
# Axis tick for z_{0.05}
scale_x_continuous(
breaks = z_alpha,
labels = expression(z[0.05]),
limits = c(-4, 4)
) +
# Arrow and text pointing to shaded region
annotate(
"curve",
x = z_alpha + 0.9, y = 0.18,
xend = z_alpha + 0.25, yend = dnorm(z_alpha + 0.25),
curvature = -0.25,
arrow = arrow(length = unit(8, "pt"))
) +
annotate(
"text",
x = z_alpha + 1.05, y = 0.20,
label = "0.05",
size = 5
) +
labs(x = NULL, y = NULL) +
theme_minimal(base_size = 14)
p
# install.packages("ggplot2") # if needed
library(ggplot2)
library(grid)   # for arrow()
alpha <- 0.05
z_alpha <- qnorm(1 - alpha)  # upper-tail critical value (â‰ˆ 1.64485)
p <- ggplot(data.frame(x = c(-4, 4)), aes(x)) +
# Density curve
stat_function(fun = dnorm, linewidth = 1) +
# Shaded upper-tail area
stat_function(
fun = dnorm, geom = "area",
xlim = c(z_alpha, 4),
alpha = 0.3
) +
# Optional vertical line at z_{0.05} (helps show the cutoff)
# Axis tick for z_{0.05}
scale_x_continuous(
breaks = z_alpha,
labels = expression(z[0.05]),
limits = c(-4, 4)
) +
# Arrow and text pointing to shaded region
annotate(
"curve",
x = z_alpha + 0.9, y = 0.18,
xend = z_alpha + 0.25, yend = dnorm(z_alpha + 0.25),
curvature = -0.25,
arrow = arrow(length = unit(8, "pt"))
) +
annotate(
"text",
x = z_alpha + 1.05, y = 0.20,
label = "0.05",
size = 5
) +
labs(x = NULL, y = NULL) +
theme_minimal(base_size = 14)
p
setwd("C:/Users/Joshua_Patrick/Box/0000_2381_book")
setwd("C:/Users/Joshua_Patrick/Box/github/baylor_score")
#| message: false
#| warning: false
library(stringr)
# A string containing both single and double quotes
quote_example <- "She said, 'R is great!'"
quote_example
# A string with a backslash and a newline
path <- "C:\\Users\\Data\\raw\n"
path
#| message: false
#| warning: false
library(stringr)
# A string containing both single and double quotes
quote_example <- "He said, 'R is great!'"
quote_example
# A string with a backslash and a newline
path <- "C:\\Users\\Data\\mydata\n"
path
str_length(c("", "abc", "ðŸ˜Š"))
fruit =  c("banana", "apple", "pear")
str_sub(fruit, 1, 3)      # first three letters
str_sub(fruit, -3, -1)    # last three letters
str_sub(fruit, 1, 1) =  str_to_upper(str_sub(fruit, 1, 1))  # capitalize first letter
fruit
species =  c("Adelie", "Chinstrap", "Gentoo")
n =  c(3, 2, 1)
str_c(n, species, sep = " ", collapse = "; ")
library(dplyr)
df =  tibble(first = c("John", NA, "Jenny"),
last  = c("Smith", "Nguyen", NA))
df |> mutate(full = str_c(coalesce(first, ""), coalesce(last, ""), sep = " "))
library(glue)
df |> mutate(message = str_glue("Hello {first} {last}!"))
letters =  c("a", "b", "c")
str_flatten(letters, collapse = ", ")
#| message: false
library(nycflights13)
flights_small =  flights |> select(carrier, flight) |> sample_n(5)
# Combine carrier and flight into a single string
flights_small =  flights_small |> mutate(flight_id = str_c(carrier, flight, sep = "-"))
# Detect whether the flight number has exactly 3 digits
flights_small |> mutate(is_three_digit = str_detect(flight_id, "-\\d{3}$"))
# Extract the numeric part of the flight ID
flights_small |> mutate(number_only = str_extract(flight_id, "\\d+"))
messy =  c("(202) 555-0198", "+1-303-555-1212")
str_replace_all(messy, "[^0-9]", "")
names =  c("SMITH, John A.", "O'NEILL, Anne", "Lee, Chen")
# Split at the comma and whitespace
df_names =  tibble(full = names) |> separate(full, into = c("last", "rest"), sep = ",\s*")
names =  c("SMITH, John A.", "O'NEILL, Anne", "Lee, Chen")
# Split at the comma and whitespace
df_names =  tibble(full = names) |> separate(full, into = c("last", "rest"), sep = ",\\s*")
df_names
library(tidyr)
who2_long =  who2 |> pivot_longer(
cols = !(country:year),
names_to = c("diagnosis", "gender", "age"),
names_sep = "_",
values_to = "count"
)
who2_long |> head()
names =  c("SMITH, John A.", "O'NEILL, Anne", "Lee, Chen")
# Split at the comma and whitespace
df_names =  tibble(full = names) |> separate(full, into = c("last", "rest"), sep = ",\\s*")
df_names
#| message: false
#| warning: false
library(tidyverse)
library(stringr)
# A string containing both single and double quotes
quote_example =  "He said, 'R is great!'"
quote_example
# A string with a backslash and a newline
path =  "C:\\Users\\Data\\mydata\n"
path
str_length(c("", "abc", "ðŸ˜Š"))
fruit =  c("banana", "apple", "pear")
str_sub(fruit, 1, 3)      # first three letters
str_sub(fruit, -3, -1)    # last three letters
str_sub(fruit, 1, 1) =  str_to_upper(str_sub(fruit, 1, 1))  # capitalize first letter
fruit
species =  c("Adelie", "Chinstrap", "Gentoo")
n =  c(3, 2, 1)
str_c(n, species, sep = " ", collapse = "; ")
library(dplyr)
df =  tibble(first = c("John", NA, "Jenny"),
last  = c("Smith", "Nguyen", NA))
df |> mutate(full = str_c(coalesce(first, ""), coalesce(last, ""), sep = " "))
library(glue)
df |> mutate(message = str_glue("Hello {first} {last}!"))
letters =  c("a", "b", "c")
str_flatten(letters, collapse = ", ")
#| message: false
library(nycflights13)
flights_small =  flights |> select(carrier, flight) |> sample_n(5)
# Combine carrier and flight into a single string
flights_small =  flights_small |> mutate(flight_id = str_c(carrier, flight, sep = "-"))
# Detect whether the flight number has exactly 3 digits
flights_small |> mutate(is_three_digit = str_detect(flight_id, "-\\d{3}$"))
# Extract the numeric part of the flight ID
flights_small |> mutate(number_only = str_extract(flight_id, "\\d+"))
messy =  c("(202) 555-0198", "+1-303-555-1212")
str_replace_all(messy, "[^0-9]", "")
names =  c("SMITH, John A.", "O'NEILL, Anne", "Lee, Chen")
# Split at the comma and whitespace
df_names =  tibble(full = names) |> separate(full, into = c("last", "rest"), sep = ",\\s*")
df_names
#| message: false
#| warning: false
library(tidyverse)
# Convert row names to a tibble with a car column
cars <- mtcars |>
rownames_to_column(var = "car") |>
as_tibble()
# Inspect the first few rows
cars |> head()
mtcars
# Create a titleâ€‘case version of the car names
cars <- cars |> mutate(car_title = str_to_title(car))
# Compare original and cleaned names
cars |> select(car, car_title) |> head()
cars <- cars |> mutate(
manufacturer = str_extract(car_title, "^[^ ]+"),
model        = str_remove(car_title, "^[^ ]+ ")
)
cars |> select(car_title, manufacturer, model) |> head()
cars |> count(manufacturer, sort = TRUE)
cars_with_digits <- cars |> filter(str_detect(model, "\\d"))
cars_with_digits |> select(manufacturer, model)
cars_with_digits <- cars_with_digits |> mutate(
model_number = as.numeric(str_extract(model, "\\d+"))
)
cars_with_digits |> select(manufacturer, model, model_number)
# Average model numbers by manufacturer
cars_with_digits |>
group_by(manufacturer) |>
summarise(mean_model = mean(model_number, na.rm = TRUE), n = n())
# Scatterplots (optional challenge)
cars_with_digits |> ggplot(aes(model_number, hp)) + geom_point() + geom_smooth(method = "lm", se = FALSE) + labs(title = "Model number vs horsepower")
cars_with_digits |> ggplot(aes(model_number, disp)) + geom_point() + geom_smooth(method = "lm", se = FALSE) + labs(title = "Model number vs displacement")
# 1. Manufacturers starting with M
cars |> filter(str_detect(manufacturer, "^M")) |> select(manufacturer, model)
# 2. Models ending with a vowel
cars |> filter(str_detect(model, "[aeiouAEIOU]$")) |> select(manufacturer, model)
# 3. Models with double letters
cars |> filter(str_detect(model, "(.)\\1")) |> select(manufacturer, model)
# Replace spaces with underscores
cars |> mutate(car_snake = str_replace_all(car_title, " ", "_")) |> select(car_title, car_snake) |> head()
# Collapse all manufacturers into one string
all_manufacturers <- cars |> pull(manufacturer) |> unique() |> str_flatten(collapse = ", ")
all_manufacturers
install.packages("survminer")
install.packages("maxstat")
library(survminer)
install.packages("C:/Users/Joshua_Patrick/Downloads/survminer_0.5.1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Joshua_Patrick/Downloads/maxstat_0.7-26.tar.gz", repos = NULL, type = "source")
